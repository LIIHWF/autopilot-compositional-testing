from .common import Dynamics, interpolate_1d, interpolate_2d
import math


class ExperimentalDynamics(Dynamics):
    def __init__(self, vl, b_table, av_table, at_table):
        self.vl = vl
        self.b_table = b_table
        self.av_table = av_table
        self.at_table = at_table

    def B(self, v):
        if v == 0.0 and 0.0 not in self.b_table:
            return 0.0
        return interpolate_1d(self.b_table, v)

    def AV(self, v, x):
        if x == 0.0:
            return v
        ret = interpolate_2d(self.av_table, (v, x), method='cubic')
        if math.isnan(ret) or ret > self.vl:
            return self.vl
        return ret

    def AT(self, v, x):
        if x == 0.0:
            return v
        # find the min x to reach self.vl using binary search
        left = 0.0
        right = 100.0
        while right - left > 1e-6:
            mid = (left + right) / 2
            if self.AV(v, mid) < self.vl:
                left = mid
            else:
                right = mid
        acc_x = left
        
        if x <= acc_x:
            ret = interpolate_2d(self.at_table, (v, x), method='cubic')
        else:
            ret = interpolate_2d(self.at_table, (v, acc_x), method='cubic')
            ret += (x - acc_x) / self.vl
        return ret


class LincolnPidDynamics(ExperimentalDynamics):
    def __init__(self, vl):
        b_table = {
            1.0: 0.1,
            2.0: 0.4,
            3.0: 1.0,
            4.0: 1.9,
            5.0: 2.3,
        }

        av_table = {
            (0.0, 0.0): 0.0, (0.0, 1.0): 2.3, (0.0, 2.0): 3.7, (0.0, 3.0): 4.7, (0.0, 4.0): 5.1, (0.0, 5.0): 5.2, (0.0, 6.0): 5.4,
            (1.0, 0.0): 1.0, (1.0, 1.0): 2.4, (1.0, 2.0): 3.8, (1.0, 3.0): 4.7, (1.0, 4.0): 5.1, (1.0, 5.0): 5.2, (1.0, 6.0): 5.4,
            (2.0, 0.0): 2.0, (2.0, 1.0): 2.9, (2.0, 2.0): 4.1, (2.0, 3.0): 5.0, (2.0, 4.0): 5.1, (2.0, 5.0): 5.2, (2.0, 6.0): 5.4,
            (3.0, 0.0): 3.0, (3.0, 1.0): 3.7, (3.0, 2.0): 4.7, (3.0, 3.0): 5.2, (3.0, 4.0): 5.2, (3.0, 5.0): 5.7, (3.0, 6.0): 6.5,
            (4.0, 0.0): 4.0, (4.0, 1.0): 4.6, (4.0, 2.0): 5.2, (4.0, 3.0): 5.2, (4.0, 4.0): 5.8, (4.0, 5.0): 6.2, (4.0, 6.0): 6.5,
        }
        
        at_table = {
            (0.0, 0.0): 0.0, (0.0, 1.0): 0.9, (0.0, 2.0): 1.2, (0.0, 3.0): 1.4, (0.0, 4.0): 1.6, (0.0, 5.0): 1.8, (0.0, 6.0): 2.0,
            (1.0, 0.0): 0.0, (1.0, 1.0): 0.6, (1.0, 2.0): 0.9, (1.0, 3.0): 1.2, (1.0, 4.0): 1.4, (1.0, 5.0): 1.6, (1.0, 6.0): 1.8,
            (2.0, 0.0): 0.0, (2.0, 1.0): 0.4, (2.0, 2.0): 0.7, (2.0, 3.0): 1.0, (2.0, 4.0): 1.1, (2.0, 5.0): 1.3, (2.0, 6.0): 1.5,
            (3.0, 0.0): 0.0, (3.0, 1.0): 0.3, (3.0, 2.0): 0.5, (3.0, 3.0): 0.7, (3.0, 4.0): 0.9, (3.0, 5.0): 1.1, (3.0, 6.0): 1.3,
            (4.0, 0.0): 0.0, (4.0, 1.0): 0.2, (4.0, 2.0): 0.4, (4.0, 3.0): 0.6, (4.0, 4.0): 0.8, (4.0, 5.0): 1.0, (4.0, 6.0): 1.1,
        }
        
        super().__init__(vl, b_table, av_table, at_table)


class MileDynamics(ExperimentalDynamics):
    def __init__(self, vl):
        b_table = {
            0.0: 0.0,
            1.0: 0.1,
            2.0: 0.6,
            3.0: 1.5,
            4.0: 2.4,
            6.5: 3.6,
        }
        
        av_table = {
            (0.0, 0.0): 0.0, (0.0, 1.0): 3.2, (0.0, 2.0): 4.9, (0.0, 3.0): 5.4, (0.0, 4.0): 5.9, (0.0, 5.0): 6.3, (0.0, 6.0): 6.5,
            (1.0, 0.0): 1.0, (1.0, 1.0): 3.3, (1.0, 2.0): 5.0, (1.0, 3.0): 5.4, (1.0, 4.0): 5.9, (1.0, 5.0): 6.3, (1.0, 6.0): 6.5,
            (2.0, 0.0): 2.0, (2.0, 1.0): 3.5, (2.0, 2.0): 5.1, (2.0, 3.0): 5.4, (2.0, 4.0): 5.9, (2.0, 5.0): 6.3, (2.0, 6.0): 6.5,
            (3.0, 0.0): 3.0, (3.0, 1.0): 4.1, (3.0, 2.0): 5.3, (3.0, 3.0): 5.4, (3.0, 4.0): 5.9, (3.0, 5.0): 6.3, (3.0, 6.0): 6.5,
            (4.0, 0.0): 4.0, (4.0, 1.0): 4.9, (4.0, 2.0): 5.3, (4.0, 3.0): 5.5, (4.0, 4.0): 6.1, (4.0, 5.0): 6.3, (4.0, 6.0): 6.5,
        }
        
        at_table = {
            (0.0, 0.0): 0.0, (0.0, 1.0): 0.7, (0.0, 2.0): 0.9, (0.0, 3.0): 1.1, (0.0, 4.0): 1.3, (0.0, 5.0): 1.5, (0.0, 6.0): 1.6,
            (1.0, 0.0): 0.0, (1.0, 1.0): 0.5, (1.0, 2.0): 0.8, (1.0, 3.0): 1.0, (1.0, 4.0): 1.2, (1.0, 5.0): 1.3, (1.0, 6.0): 1.5,
            (2.0, 0.0): 0.0, (2.0, 1.0): 0.4, (2.0, 2.0): 0.6, (2.0, 3.0): 0.8, (2.0, 4.0): 1.0, (2.0, 5.0): 1.2, (2.0, 6.0): 1.3,
            (3.0, 0.0): 0.0, (3.0, 1.0): 0.3, (3.0, 2.0): 0.5, (3.0, 3.0): 0.7, (3.0, 4.0): 0.9, (3.0, 5.0): 1.0, (3.0, 6.0): 1.2,
            (4.0, 0.0): 0.0, (4.0, 1.0): 0.2, (4.0, 2.0): 0.4, (4.0, 3.0): 0.6, (4.0, 4.0): 0.8, (4.0, 5.0): 0.9, (4.0, 6.0): 1.1,
        }
        
        super().__init__(vl, b_table, av_table, at_table)
